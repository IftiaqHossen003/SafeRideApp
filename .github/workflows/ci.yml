name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.2, 8.3]
        node-version: [20]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: saferide_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create .env file
      run: |
        cp .env.example .env
        echo "APP_ENV=testing" >> .env
        echo "APP_DEBUG=false" >> .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=saferide_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=" >> .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create SQLite database for testing
      run: |
        touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Seed test data
      run: php artisan db:seed --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Clear config cache
      run: php artisan config:clear

    - name: Run PHP tests
      run: php artisan test
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        APP_ENV: testing

    - name: Run PHP Code Sniffer (optional)
      run: ./vendor/bin/pint --test
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run security audit
      run: composer audit
      continue-on-error: true